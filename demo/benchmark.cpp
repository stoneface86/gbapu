//
// Simple benchmark program. Benchmark does a stress test on the APU, all
// channels outputting at maximum frequency. The test is run once for all
// possible quality setings.
//

#include "gbapu.hpp"

#include <chrono>
#include <iostream>

using namespace std::chrono;
using Clock = high_resolution_clock;

constexpr unsigned SAMPLERATE = 48000;
constexpr size_t CYCLES_PER_FRAME = 4194304 / 59.7;

constexpr size_t FRAMES_PER_BENCHMARK = 1000;

// duration of the audio generated by the benchmark
constexpr nanoseconds BENCHMARK_REALTIME = nanoseconds(1000000000 * FRAMES_PER_BENCHMARK * CYCLES_PER_FRAME / 4194304);




struct BenchmarkResults {
    Clock::duration elapsed;
    Clock::duration minimum;
    Clock::duration maximum;
    Clock::duration average;
    // ratio of duration of audio generated to the time needed to generate that audio
    double ratio;
};

void printResults(BenchmarkResults const& results) {
    std::cout << " * Total elapsed time: "
        << duration_cast<milliseconds>(results.elapsed).count()
        << " ms" << std::endl;
    std::cout << " * Minimum frame time: "
        << duration_cast<microseconds>(results.minimum).count()
        << " us" << std::endl;
    std::cout << " * Maximum frame time: "
        << duration_cast<microseconds>(results.maximum).count()
        << " us" << std::endl;
    std::cout << " * Average frame time: "
        << duration_cast<microseconds>(results.average).count()
        << " us" << std::endl;
    std::cout << " * Ratio: " << results.ratio << std::endl;

}


void doBenchmark(gbapu::Apu &apu, BenchmarkResults &results) {
    apu.reset();
    apu.writeRegister(gbapu::Apu::REG_NR52, 0x80, 0);
    apu.writeRegister(gbapu::Apu::REG_NR51, 0xFF, 0);
    apu.writeRegister(gbapu::Apu::REG_NR50, 0x77, 0);

    // waveram
    apu.writeRegister(gbapu::Apu::REG_NR30, 0x00, 0);
    apu.writeRegister(gbapu::Apu::REG_WAVERAM, 0x01, 0);
    apu.writeRegister(gbapu::Apu::REG_WAVERAM, 0x23, 0);
    apu.writeRegister(gbapu::Apu::REG_WAVERAM, 0x45, 0);
    apu.writeRegister(gbapu::Apu::REG_WAVERAM, 0x67, 0);
    apu.writeRegister(gbapu::Apu::REG_WAVERAM, 0x89, 0);
    apu.writeRegister(gbapu::Apu::REG_WAVERAM, 0xAB, 0);
    apu.writeRegister(gbapu::Apu::REG_WAVERAM, 0xCD, 0);
    apu.writeRegister(gbapu::Apu::REG_WAVERAM, 0xEF, 0);
    apu.writeRegister(gbapu::Apu::REG_WAVERAM, 0xFE, 0);
    apu.writeRegister(gbapu::Apu::REG_WAVERAM, 0xDC, 0);
    apu.writeRegister(gbapu::Apu::REG_WAVERAM, 0xBA, 0);
    apu.writeRegister(gbapu::Apu::REG_WAVERAM, 0x98, 0);
    apu.writeRegister(gbapu::Apu::REG_WAVERAM, 0x76, 0);
    apu.writeRegister(gbapu::Apu::REG_WAVERAM, 0x54, 0);
    apu.writeRegister(gbapu::Apu::REG_WAVERAM, 0x32, 0);
    apu.writeRegister(gbapu::Apu::REG_WAVERAM, 0x10, 0);
    apu.writeRegister(gbapu::Apu::REG_NR30, 0x80, 0);

    // volume 100%
    apu.writeRegister(gbapu::Apu::REG_NR12, 0xF0, 0);
    apu.writeRegister(gbapu::Apu::REG_NR22, 0xF0, 0);
    apu.writeRegister(gbapu::Apu::REG_NR42, 0xF0, 0);

    // frequency MAXIMUM
    apu.writeRegister(gbapu::Apu::REG_NR13, 0xFF, 0);
    apu.writeRegister(gbapu::Apu::REG_NR23, 0xFF, 0);
    apu.writeRegister(gbapu::Apu::REG_NR33, 0xFF, 0);
    apu.writeRegister(gbapu::Apu::REG_NR43, 0x00, 0);

    // retrigger
    apu.writeRegister(gbapu::Apu::REG_NR14, 0x87, 0);
    apu.writeRegister(gbapu::Apu::REG_NR24, 0x87, 0);
    apu.writeRegister(gbapu::Apu::REG_NR34, 0x87, 0);
    apu.writeRegister(gbapu::Apu::REG_NR44, 0x80, 0);

    results.elapsed = 0ns;
    results.minimum = nanoseconds::max();
    results.maximum = 0ns;

    for (size_t i = 0; i < FRAMES_PER_BENCHMARK; ++i) {
        auto startTime = Clock::now();
        apu.step(CYCLES_PER_FRAME);
        auto frameTime = Clock::now() - startTime;
        if (frameTime < results.minimum) {
            results.minimum = frameTime;
        }
        if (frameTime > results.maximum) {
            results.maximum = frameTime;
        }
        results.elapsed += frameTime;
        apu.endFrame();
        apu.clearSamples();
    }

    results.average = results.elapsed / FRAMES_PER_BENCHMARK;
    results.ratio = (double)BENCHMARK_REALTIME.count() / results.elapsed.count();
}


int main() {

    gbapu::Apu apu(SAMPLERATE, SAMPLERATE / 10);
    BenchmarkResults results;

    std::cout << "Synthesizing " << FRAMES_PER_BENCHMARK << " frames per test" << std::endl;

    std::cout << std::endl << "Quality: Low" << std::endl;
    apu.setQuality(gbapu::Apu::Quality::low);
    doBenchmark(apu, results);
    printResults(results);

    std::cout << std::endl << "Quality: Medium" << std::endl;
    apu.setQuality(gbapu::Apu::Quality::medium);
    doBenchmark(apu, results);
    printResults(results);

    std::cout << std::endl << "Quality: High" << std::endl;
    apu.setQuality(gbapu::Apu::Quality::high);
    doBenchmark(apu, results);
    printResults(results);


    return 0;
}